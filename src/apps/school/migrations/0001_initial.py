# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-05-16 10:32
from __future__ import unicode_literals

import apps.school.utils
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=100)),
                ('school_year', models.CharField(help_text='School year in 2016-2017 format.', max_length=9, validators=[apps.school.validations.validate_school_year])),
                ('name', models.CharField(blank=True, default=None, max_length=250, null=True)),
                ('ec_points', models.PositiveIntegerField(help_text='EC Points that the student can get.')),
                ('number_essays', models.PositiveIntegerField(help_text='Number of essays and thus results the student can get on this course.')),
                ('number_resits', models.PositiveIntegerField(default=1, help_text='Number of resits possible.')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(help_text='Student class code.', max_length=50)),
                ('school_year', models.CharField(help_text='School year in 2016-2017 format.', max_length=9, validators=[apps.school.validations.validate_school_year])),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ignore_absence', models.BooleanField(default=False, help_text='Check this to ignore the absence reports, and lower the weight of the absence of the students. this is useful when this lesson is an extra lesson and only some students will follow it.')),
                ('start', models.DateTimeField(help_text='Start date and time of the lesson')),
                ('end', models.DateTimeField(help_text='End date and time of the lesson')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='school.Course')),
                ('group', models.ForeignKey(help_text='The group that got this lesson.', on_delete=django.db.models.deletion.CASCADE, to='school.Group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ec_points', models.PositiveIntegerField(help_text='The EC Points the student got with this result.', null=True)),
                ('number_grade', models.PositiveIntegerField(help_text='The grade from 0 to 10 where 0 is not present and 10 is fully passed.', null=True)),
                ('ladder_grade', models.DecimalField(choices=[(0, 'Not present'), (1, 'Failed'), (2, 'Passed')], decimal_places=1, help_text='The grade in ladder format.', max_digits=2, null=True)),
                ('resit', models.BooleanField(default=False, help_text='Is this result from a resit essay.')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Course')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('joined_at', models.DateTimeField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='person_student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Counselor',
            fields=[
                ('teacher_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='school.Teacher')),
            ],
            options={
                'abstract': False,
            },
            bases=('school.teacher',),
        ),
        migrations.AddField(
            model_name='teacher',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='person_teacher', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='result',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='school.Student'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='teacher',
            field=models.ForeignKey(help_text='Select the teacher that is giving this lesson.', on_delete=django.db.models.deletion.CASCADE, to='school.Teacher'),
        ),
        migrations.AddField(
            model_name='group',
            name='students',
            field=models.ManyToManyField(related_name='groups', to='school.Student'),
        ),
        migrations.AddField(
            model_name='course',
            name='teachers',
            field=models.ManyToManyField(to='school.Teacher'),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together=set([('code', 'school_year')]),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together=set([('code', 'school_year')]),
        ),
    ]
